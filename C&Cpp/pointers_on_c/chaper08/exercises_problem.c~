/*
 * =====================================================================================
 *
 *       Filename:    exercises_problem.c
 *       Author:      linwei
 *       E-mail:      kinglw8729@gmail.com
 *       Created:     2012-5-24 22:18:55
 *       Last Edit:   2012-5-24 22:19:00
 *       Compiler:    gcc
 *       Description: pointers on c chaper8 exercises
 *
 * =====================================================================================
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <string.h>
#include <float.h>
// problem 2: 美国政府计算个税
static float income_limit[] = {0,23350,56550,117950,256500,DBL_MAX};
static float base_tax[] = {0,3502.50,12798.50,31832.50,81710.50};
static float percentage[] = {.15, .28, .31, .36, .396};
float single_tax(float income)
{
  int i;
  for(i = 0; i < sizeof(income_limit)/sizeof(float); ++i){
    if(income<income_limit[i])
      break;
  }
  printf("%d\n",i);
  return base_tax[i-1] + (income-income_limit[i-1])*percentage[i-1];
}

int test(int a[])
{
  return sizeof(a);
}

// problem 3: 判断单位矩阵
int identity_matrix(int matrix[][10],int n)
{
  int i,j;
  for(i = 0; i < n; ++i)
    for(j = 0; j < n; ++j){
      if(i!=j&&matrix[i][j]!=0) return 0;
      else if(i == j && matrix[i][j] != 1) return 0;
    }
  return 1;
}

// problem 4: 扩展problem3
int identity_matrix_extend(int *matrix, int n)
{
  int i,j;
  for(i = 0; i < n; ++i)
    for(j = 0; j < n; ++j){
      if(i !=j && matrix[i*10+j] != 0)
	return 0;
      else if(i == j && matrix[i*10+j] !=1)
	return 0;
    }
  return 1;
}

// problem 5: 实现矩阵相乘
// m1 is m1[x][y], m2 is m2[y][z], r is r[x][z]
void matrix_multiply( int *m1, int *m2, int *r,
		      int x, int y, int z)
{
  int i,j,k;
  for(i = 0; i < x; ++i){
    for(j = 0; j < z; ++j){
      for(k = 0; k < y; ++k){
	r[i*z+j] += m1[i*y+k]*m2[k*z+j];
      }
    }
  }
}


// problem 6: 
int array_offset( int arrayinfo[], ...)
{

}

main()
{
  int a[] = {1,2,3,4,5,6,7,8};
  int m1[3][2] = {
    {2,-6},
    {3,5},
    {1,-1}
  };
  int m2[2][4] = {
    {4,-2,-4,-5},
    {-7,-3,6,7}
  };
  int r[3][4] = {0};
  int i,j;
  printf("%f\n",single_tax(256510));
  printf("%d\n",test(a));
  matrix_multiply(m1,m2,r,3,2,4);
  for(i = 0; i<3;++i)
    for(j = 0; j < 4; ++j)
      printf("%d ",r[i][j]);


}



 





 
 








